{
  "address": "0x6389bA79C2E4f4dD0e7D8BF6c00577A4eaa03504",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IDCIP",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_updater",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_periodicalPurchaseLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_blocksPerPeriod",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Bought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "blackList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blacklistedWallets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksPerPeriod",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBNBEarnedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "isPeriodicalPurchaseOverLimit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximumDepositBNBAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumDepositBNBAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodicalPurchaseLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "purchaseInfoCollection",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "_deadline",
              "type": "uint64"
            }
          ],
          "internalType": "struct Timers.BlockNumber",
          "name": "cooldownEnd",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "totalBoughtInBNB",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isInitialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "removeFromBlacklist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "blocks",
          "type": "uint64"
        }
      ],
      "name": "setCooldownPeriod",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bnb",
          "type": "uint256"
        }
      ],
      "name": "setPeriodicalPurchaseLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "setTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_updater",
          "type": "address"
        }
      ],
      "name": "setUpdateAccount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IDCIP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBNBEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawBNB",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawDCIP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x42f8b73dd23c2ea8486a70d0178f9dab611c8272f868f64e80af978b05a9bf4f",
  "receipt": {
    "to": null,
    "from": "0x2BDa7274fF0c0d2356691aee9fC800F04194d7AE",
    "contractAddress": "0x6389bA79C2E4f4dD0e7D8BF6c00577A4eaa03504",
    "transactionIndex": 5,
    "gasUsed": "1361330",
    "logsBloom": "0x
    "blockHash": "0x36bd63a025f42585d709a550ff46f1f480a497bf083013de835a98702ec24e16",
    "transactionHash": "0x42f8b73dd23c2ea8486a70d0178f9dab611c8272f868f64e80af978b05a9bf4f",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 12582381,
        "transactionHash": "0x42f8b73dd23c2ea8486a70d0178f9dab611c8272f868f64e80af978b05a9bf4f",
        "address": "0x6389bA79C2E4f4dD0e7D8BF6c00577A4eaa03504",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002bda7274ff0c0d2356691aee9fc800f04194d7ae"
        ],
        "data": "0x",
        "logIndex": 35,
        "blockHash": "0x36bd63a025f42585d709a550ff46f1f480a497bf083013de835a98702ec24e16"
      }
    ],
    "blockNumber": 12582381,
    "cumulativeGasUsed": "2310513",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x308fc5cdd559be5cb62b08a26a4699bbef4a888f",
    "0x2BDa7274fF0c0d2356691aee9fC800F04194d7AE",
    "10000000000000000000",
    28800
  ],
  "solcInputHash": "bad67a1ca9faca0f4016f63ce2b0a5d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDCIP\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_periodicalPurchaseLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_blocksPerPeriod\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"blackList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklistedWallets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBNBEarnedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"isPeriodicalPurchaseOverLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumDepositBNBAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDepositBNBAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodicalPurchaseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"purchaseInfoCollection\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"_deadline\",\"type\":\"uint64\"}],\"internalType\":\"struct Timers.BlockNumber\",\"name\":\"cooldownEnd\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalBoughtInBNB\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInitialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"blocks\",\"type\":\"uint64\"}],\"name\":\"setCooldownPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bnb\",\"type\":\"uint256\"}],\"name\":\"setPeriodicalPurchaseLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"}],\"name\":\"setUpdateAccount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IDCIP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBNBEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBNB\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawDCIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/otcSale.sol\":\"OtcSale\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/interfaces/dcip.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IDCIP {\\n    function transfer(address to, uint256 amount) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function decimals() external pure returns (uint8);\\n}\\n\",\"keccak256\":\"0x4677a86c5b748ca1928920f7867854b4894ab77499058a9767c14ca10419f9b1\",\"license\":\"MIT\"},\"contracts/libraries/ownable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xb5c51216e7e4bf261ed9f603d33e88287d1bb3da5ac02c37f07168eaa70dfc9b\",\"license\":\"MIT\"},\"contracts/libraries/timers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Tooling for timepoints, timers and delays\\n */\\nlibrary Timers {\\n    struct Timestamp {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(Timestamp memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(Timestamp storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(Timestamp storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(Timestamp memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(Timestamp memory timer) internal view returns (bool) {\\n        return timer._deadline > block.timestamp;\\n    }\\n\\n    function isExpired(Timestamp memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.timestamp;\\n    }\\n\\n    struct BlockNumber {\\n        uint64 _deadline;\\n    }\\n\\n    function getDeadline(BlockNumber memory timer) internal pure returns (uint64) {\\n        return timer._deadline;\\n    }\\n\\n    function setDeadline(BlockNumber storage timer, uint64 timestamp) internal {\\n        timer._deadline = timestamp;\\n    }\\n\\n    function reset(BlockNumber storage timer) internal {\\n        timer._deadline = 0;\\n    }\\n\\n    function isUnset(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline == 0;\\n    }\\n\\n    function isStarted(BlockNumber memory timer) internal pure returns (bool) {\\n        return timer._deadline > 0;\\n    }\\n\\n    function isPending(BlockNumber memory timer) internal view returns (bool) {\\n        return timer._deadline > block.number;\\n    }\\n\\n    function isExpired(BlockNumber memory timer) internal view returns (bool) {\\n        return isStarted(timer) && timer._deadline <= block.number;\\n    }\\n}\\n\",\"keccak256\":\"0xa148c8589518a17ee22057cafe18b8c2da8330201a8ee20cfd66b576a01f5778\",\"license\":\"MIT\"},\"contracts/otcSale.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4; // 0.8+ protects us against int overflows, no need for safemath\\n\\nimport './libraries/ownable.sol';\\nimport './interfaces/dcip.sol';\\nimport './libraries/timers.sol';\\nimport '@openzeppelin/contracts/utils/math/SafeCast.sol';\\n\\n// Stores sum of all purchases made within cooldown period.\\nstruct PurchaseInfo {\\n    Timers.BlockNumber cooldownEnd;\\n    uint256 totalBoughtInBNB;\\n    bool isInitialized;\\n}\\n\\ncontract OtcSale is Ownable {\\n    using SafeCast for uint256;\\n    using Timers for Timers.BlockNumber;\\n\\n    IDCIP public token;\\n    uint256 public totalBNBEarned;\\n    uint256 public minimumDepositBNBAmount = 1 wei;\\n    uint256 public maximumDepositBNBAmount = 100000000 ether;\\n    uint256 public tokenRate;\\n    address private updater;\\n\\n    mapping(address => bool) public blacklistedWallets;\\n    mapping(address => PurchaseInfo) public purchaseInfoCollection;\\n    uint256 public periodicalPurchaseLimit; // Within cooldown\\n    uint64 public blocksPerPeriod;\\n\\n    constructor(\\n        IDCIP _tokenAddress,\\n        address _updater,\\n        uint256 _periodicalPurchaseLimit,\\n        uint64 _blocksPerPeriod\\n    ) {\\n        token = _tokenAddress;\\n        tokenRate = 999999999999999;\\n        periodicalPurchaseLimit = _periodicalPurchaseLimit;\\n        blocksPerPeriod = _blocksPerPeriod;\\n        updater = _updater;\\n    }\\n\\n    function setCooldownPeriod(uint64 blocks) public onlyOwner returns (uint64) {\\n        blocksPerPeriod = blocks;\\n        return blocksPerPeriod;\\n    }\\n\\n    function setPeriodicalPurchaseLimit(uint256 bnb) public onlyOwner returns (uint256) {\\n        periodicalPurchaseLimit = bnb;\\n        return bnb;\\n    }\\n\\n    function buy() external payable returns (bool) {\\n        require(!blacklistedWallets[msg.sender], 'You are banned from the otcSale');\\n        require(tokenRate > 1, 'Invalid tokenPrice');\\n        require(\\n            msg.value >= minimumDepositBNBAmount && msg.value <= maximumDepositBNBAmount,\\n            'Purchase is too small or big'\\n        );\\n        require(\\n            !isPeriodicalPurchaseOverLimit(msg.sender, msg.value),\\n            'This purchase would exceed the allowed limits. Wait for the cooldown period to expire'\\n        );\\n\\n        uint256 tokenAmount = ((msg.value * tokenRate) / ((10**18))) * (10**9);\\n\\n        require(tokenAmount > 0, 'You need to buy at least 1 DCIP');\\n\\n        require(token.balanceOf(address(this)) >= tokenAmount, 'Not enough DCIP available for sale'); // Enough DCIP balance for sale\\n\\n        // updatePurchaseData(msg.sender, msg.value);\\n        // test\\n\\n        totalBNBEarned = totalBNBEarned + msg.value;\\n        token.transfer(msg.sender, tokenAmount);\\n        emit Bought(msg.sender, tokenAmount);\\n        return true;\\n    }\\n\\n    function updatePurchaseData(address adr, uint256 amount) internal returns (bool) {\\n        PurchaseInfo storage d = purchaseInfoCollection[adr];\\n        uint64 currentBlock = block.number.toUint64();\\n        if (!d.isInitialized || d.cooldownEnd.isExpired()) {\\n            // (re)create\\n            d.totalBoughtInBNB = amount;\\n            d.cooldownEnd = Timers.BlockNumber(currentBlock + blocksPerPeriod);\\n            d.isInitialized = true;\\n            return true;\\n        } else {\\n            d.totalBoughtInBNB = d.totalBoughtInBNB + amount;\\n            d.cooldownEnd = Timers.BlockNumber(currentBlock + blocksPerPeriod);\\n            return true;\\n        }\\n    }\\n\\n    function isPeriodicalPurchaseOverLimit(address adr, uint256 amount) public view returns (bool) {\\n        return amount > periodicalPurchaseLimit;\\n\\n        // PurchaseInfo storage d = purchaseInfoCollection[adr];\\n        // if (d.cooldownEnd.isExpired()) {\\n        //     return false; // TODO: What happens here if it is not yet initialized for first buy?\\n        // } else {\\n        //     return (d.totalBoughtInBNB + amount > periodicalPurchaseLimit);\\n        // }s\\n    }\\n\\n    function getTokenRate() public view returns (uint256) {\\n        return tokenRate;\\n    }\\n\\n    function setUpdateAccount(address _updater) public onlyOwner returns (bool) {\\n        updater = _updater;\\n        return true;\\n    }\\n\\n    function setTokenPrice(uint256 _rate) public returns (uint256) {\\n        require(msg.sender == updater, 'Address is unauthorized');\\n        require(_rate > 0, 'Rate must be higher than 0');\\n        tokenRate = _rate;\\n        return tokenRate;\\n    }\\n\\n    function blackList(address wallet) public onlyOwner returns (bool) {\\n        blacklistedWallets[wallet] = true;\\n        return true;\\n    }\\n\\n    function removeFromBlacklist(address wallet) public onlyOwner returns (bool) {\\n        blacklistedWallets[wallet] = false;\\n        return true;\\n    }\\n\\n    function withdrawDCIP() external onlyOwner {\\n        uint256 balance = token.balanceOf(address(this));\\n        token.transfer(msg.sender, balance);\\n    }\\n\\n    function withdrawBNB() external onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function getBNBEarnedAmount() external view returns (uint256) {\\n        return totalBNBEarned;\\n    }\\n\\n    event Bought(address indexed user, uint256 amount);\\n}\\n\",\"keccak256\":\"0xdf0509a3cc8c08f9ec790ab390021594aa9be2880b57d20be8c20545e47833e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260016003556a52b7d2dcc80cd2e40000006004553480156200002557600080fd5b506040516200164d3803806200164d833981016040819052620000489162000107565b6200005333620000b7565b600180546001600160a01b039586166001600160a01b03199182161790915566038d7ea4c67fff600555600992909255600a80546001600160401b039092166001600160401b03199092169190911790556006805492909316911617905562000185565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080608085870312156200011d578384fd5b84516200012a816200016c565b60208601519094506200013d816200016c565b6040860151606087015191945092506001600160401b038116811462000161578182fd5b939692955090935050565b6001600160a01b03811681146200018257600080fd5b50565b6114b880620001956000396000f3fe60806040526004361061018b5760003560e01c80636df1f680116100d6578063a2da00661161007f578063f2fde38b11610059578063f2fde38b1461048c578063f9e1c5c9146104ac578063fc0c546a146104cd57600080fd5b8063a2da0066146103ef578063a6db861814610405578063a6f2ae3a1461048457600080fd5b80638da5cb5b116100b05780638da5cb5b146103775780639de230f6146103c3578063a2d61c8b146103d957600080fd5b80636df1f68014610313578063715018a6146103295780638b9a95f01461033e57600080fd5b80633e2d700411610138578063537df3b611610112578063537df3b6146102b35780636a61e5fc146102d35780636d5cb97c146102f357600080fd5b80633e2d7004146102695780633f1de83c1461027e5780634838d1651461029357600080fd5b80632b5ba3b9116101695780632b5ba3b9146101ef578063317118841461022f5780633d2700611461024557600080fd5b80630218d3931461019057806318d34afa146101c35780631d111d13146101da575b600080fd5b34801561019c57600080fd5b506101b06101ab36600461136d565b6104fa565b6040519081526020015b60405180910390f35b3480156101cf57600080fd5b506101d861058e565b005b3480156101e657600080fd5b506101d861073f565b3480156101fb57600080fd5b5061021f61020a366004611323565b60076020526000908152604090205460ff1681565b60405190151581526020016101ba565b34801561023b57600080fd5b506101b060055481565b34801561025157600080fd5b5061021f610260366004611344565b60095410919050565b34801561027557600080fd5b506005546101b0565b34801561028a57600080fd5b506002546101b0565b34801561029f57600080fd5b5061021f6102ae366004611323565b6107ef565b3480156102bf57600080fd5b5061021f6102ce366004611323565b6108c5565b3480156102df57600080fd5b506101b06102ee36600461136d565b610997565b3480156102ff57600080fd5b5061021f61030e366004611323565b610a8e565b34801561031f57600080fd5b506101b060035481565b34801561033557600080fd5b506101d8610b5a565b34801561034a57600080fd5b5061035e61035936600461139d565b610be7565b60405167ffffffffffffffff90911681526020016101ba565b34801561038357600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ba565b3480156103cf57600080fd5b506101b060025481565b3480156103e557600080fd5b506101b060045481565b3480156103fb57600080fd5b506101b060095481565b34801561041157600080fd5b5061045c610420366004611323565b6008602090815260009182526040918290208251918201909252815467ffffffffffffffff168152600182015460029092015490919060ff1683565b60408051935167ffffffffffffffff16845260208401929092521515908201526060016101ba565b61021f610ca5565b34801561049857600080fd5b506101d86104a7366004611323565b611161565b3480156104b857600080fd5b50600a5461035e9067ffffffffffffffff1681565b3480156104d957600080fd5b5060015461039e9073ffffffffffffffffffffffffffffffffffffffff1681565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610581576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b506009819055805b919050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461060f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561067957600080fd5b505afa15801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b19190611385565b6001546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb90604401600060405180830381600087803b15801561072457600080fd5b505af1158015610738573d6000803e3d6000fd5b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b60405133904780156108fc02916000818181858888f193505050501580156107ec573d6000803e3d6000fd5b50565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610871576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b5073ffffffffffffffffffffffffffffffffffffffff16600090815260076020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915590565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b5073ffffffffffffffffffffffffffffffffffffffff16600090815260076020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600190565b60065460009073ffffffffffffffffffffffffffffffffffffffff163314610a1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4164647265737320697320756e617574686f72697a65640000000000000000006044820152606401610578565b60008211610a85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f52617465206d75737420626520686967686572207468616e20300000000000006044820152606401610578565b50600581905590565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610b10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b506006805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790556001919050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610bdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b610be5600061128a565b565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610c69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b50600a80547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff92909216918217905590565b3360009081526007602052604081205460ff1615610d1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f596f75206172652062616e6e65642066726f6d20746865206f746353616c65006044820152606401610578565b600160055411610d8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420746f6b656e507269636500000000000000000000000000006044820152606401610578565b6003543410158015610d9f57506004543411155b610e05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f507572636861736520697320746f6f20736d616c6c206f7220626967000000006044820152606401610578565b600954341115610ebd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605560248201527f5468697320707572636861736520776f756c642065786365656420746865206160448201527f6c6c6f776564206c696d6974732e205761697420666f722074686520636f6f6c60648201527f646f776e20706572696f6420746f206578706972650000000000000000000000608482015260a401610578565b6000670de0b6b3a764000060055434610ed69190611416565b610ee091906113dd565b610eee90633b9aca00611416565b905060008111610f5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f596f75206e65656420746f20627579206174206c6561737420312044434950006044820152606401610578565b6001546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152829173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015610fc357600080fd5b505afa158015610fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffb9190611385565b1015611089576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4e6f7420656e6f756768204443495020617661696c61626c6520666f7220736160448201527f6c650000000000000000000000000000000000000000000000000000000000006064820152608401610578565b3460025461109791906113c5565b6002556001546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90604401600060405180830381600087803b15801561110c57600080fd5b505af1158015611120573d6000803e3d6000fd5b50506040518381523392507fc55650ccda1011e1cdc769b1fbf546ebb8c97800b6072b49e06cd560305b1d67915060200160405180910390a2600191505090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b73ffffffffffffffffffffffffffffffffffffffff8116611285576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610578565b6107ec815b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461058957600080fd5b600060208284031215611334578081fd5b61133d826112ff565b9392505050565b60008060408385031215611356578081fd5b61135f836112ff565b946020939093013593505050565b60006020828403121561137e578081fd5b5035919050565b600060208284031215611396578081fd5b5051919050565b6000602082840312156113ae578081fd5b813567ffffffffffffffff8116811461133d578182fd5b600082198211156113d8576113d8611453565b500190565b600082611411577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561144e5761144e611453565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212208893960b21866a0dd1591d454a62df0bfb0116f4d045b350d50433713ce86acf64736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061018b5760003560e01c80636df1f680116100d6578063a2da00661161007f578063f2fde38b11610059578063f2fde38b1461048c578063f9e1c5c9146104ac578063fc0c546a146104cd57600080fd5b8063a2da0066146103ef578063a6db861814610405578063a6f2ae3a1461048457600080fd5b80638da5cb5b116100b05780638da5cb5b146103775780639de230f6146103c3578063a2d61c8b146103d957600080fd5b80636df1f68014610313578063715018a6146103295780638b9a95f01461033e57600080fd5b80633e2d700411610138578063537df3b611610112578063537df3b6146102b35780636a61e5fc146102d35780636d5cb97c146102f357600080fd5b80633e2d7004146102695780633f1de83c1461027e5780634838d1651461029357600080fd5b80632b5ba3b9116101695780632b5ba3b9146101ef578063317118841461022f5780633d2700611461024557600080fd5b80630218d3931461019057806318d34afa146101c35780631d111d13146101da575b600080fd5b34801561019c57600080fd5b506101b06101ab36600461136d565b6104fa565b6040519081526020015b60405180910390f35b3480156101cf57600080fd5b506101d861058e565b005b3480156101e657600080fd5b506101d861073f565b3480156101fb57600080fd5b5061021f61020a366004611323565b60076020526000908152604090205460ff1681565b60405190151581526020016101ba565b34801561023b57600080fd5b506101b060055481565b34801561025157600080fd5b5061021f610260366004611344565b60095410919050565b34801561027557600080fd5b506005546101b0565b34801561028a57600080fd5b506002546101b0565b34801561029f57600080fd5b5061021f6102ae366004611323565b6107ef565b3480156102bf57600080fd5b5061021f6102ce366004611323565b6108c5565b3480156102df57600080fd5b506101b06102ee36600461136d565b610997565b3480156102ff57600080fd5b5061021f61030e366004611323565b610a8e565b34801561031f57600080fd5b506101b060035481565b34801561033557600080fd5b506101d8610b5a565b34801561034a57600080fd5b5061035e61035936600461139d565b610be7565b60405167ffffffffffffffff90911681526020016101ba565b34801561038357600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ba565b3480156103cf57600080fd5b506101b060025481565b3480156103e557600080fd5b506101b060045481565b3480156103fb57600080fd5b506101b060095481565b34801561041157600080fd5b5061045c610420366004611323565b6008602090815260009182526040918290208251918201909252815467ffffffffffffffff168152600182015460029092015490919060ff1683565b60408051935167ffffffffffffffff16845260208401929092521515908201526060016101ba565b61021f610ca5565b34801561049857600080fd5b506101d86104a7366004611323565b611161565b3480156104b857600080fd5b50600a5461035e9067ffffffffffffffff1681565b3480156104d957600080fd5b5060015461039e9073ffffffffffffffffffffffffffffffffffffffff1681565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610581576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b506009819055805b919050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461060f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561067957600080fd5b505afa15801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b19190611385565b6001546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905291925073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb90604401600060405180830381600087803b15801561072457600080fd5b505af1158015610738573d6000803e3d6000fd5b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b60405133904780156108fc02916000818181858888f193505050501580156107ec573d6000803e3d6000fd5b50565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610871576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b5073ffffffffffffffffffffffffffffffffffffffff16600090815260076020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915590565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b5073ffffffffffffffffffffffffffffffffffffffff16600090815260076020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600190565b60065460009073ffffffffffffffffffffffffffffffffffffffff163314610a1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4164647265737320697320756e617574686f72697a65640000000000000000006044820152606401610578565b60008211610a85576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f52617465206d75737420626520686967686572207468616e20300000000000006044820152606401610578565b50600581905590565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610b10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b506006805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790556001919050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610bdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b610be5600061128a565b565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610c69576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b50600a80547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff92909216918217905590565b3360009081526007602052604081205460ff1615610d1f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f596f75206172652062616e6e65642066726f6d20746865206f746353616c65006044820152606401610578565b600160055411610d8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c696420746f6b656e507269636500000000000000000000000000006044820152606401610578565b6003543410158015610d9f57506004543411155b610e05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f507572636861736520697320746f6f20736d616c6c206f7220626967000000006044820152606401610578565b600954341115610ebd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605560248201527f5468697320707572636861736520776f756c642065786365656420746865206160448201527f6c6c6f776564206c696d6974732e205761697420666f722074686520636f6f6c60648201527f646f776e20706572696f6420746f206578706972650000000000000000000000608482015260a401610578565b6000670de0b6b3a764000060055434610ed69190611416565b610ee091906113dd565b610eee90633b9aca00611416565b905060008111610f5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f596f75206e65656420746f20627579206174206c6561737420312044434950006044820152606401610578565b6001546040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152829173ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015610fc357600080fd5b505afa158015610fd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffb9190611385565b1015611089576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4e6f7420656e6f756768204443495020617661696c61626c6520666f7220736160448201527f6c650000000000000000000000000000000000000000000000000000000000006064820152608401610578565b3460025461109791906113c5565b6002556001546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90604401600060405180830381600087803b15801561110c57600080fd5b505af1158015611120573d6000803e3d6000fd5b50506040518381523392507fc55650ccda1011e1cdc769b1fbf546ebb8c97800b6072b49e06cd560305b1d67915060200160405180910390a2600191505090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b73ffffffffffffffffffffffffffffffffffffffff8116611285576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610578565b6107ec815b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461058957600080fd5b600060208284031215611334578081fd5b61133d826112ff565b9392505050565b60008060408385031215611356578081fd5b61135f836112ff565b946020939093013593505050565b60006020828403121561137e578081fd5b5035919050565b600060208284031215611396578081fd5b5051919050565b6000602082840312156113ae578081fd5b813567ffffffffffffffff8116811461133d578182fd5b600082198211156113d8576113d8611453565b500190565b600082611411577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561144e5761144e611453565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea26469706673582212208893960b21866a0dd1591d454a62df0bfb0116f4d045b350d50433713ce86acf64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1501,
        "contract": "contracts/otcSale.sol:OtcSale",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1837,
        "contract": "contracts/otcSale.sol:OtcSale",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IDCIP)1247"
      },
      {
        "astId": 1839,
        "contract": "contracts/otcSale.sol:OtcSale",
        "label": "totalBNBEarned",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1842,
        "contract": "contracts/otcSale.sol:OtcSale",
        "label": "minimumDepositBNBAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1845,
        "contract": "contracts/otcSale.sol:OtcSale",
        "label": "maximumDepositBNBAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1847,
        "contract": "contracts/otcSale.sol:OtcSale",
        "label": "tokenRate",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1849,
        "contract": "contracts/otcSale.sol:OtcSale",
        "label": "updater",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1853,
        "contract": "contracts/otcSale.sol:OtcSale",
        "label": "blacklistedWallets",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1858,
        "contract": "contracts/otcSale.sol:OtcSale",
        "label": "purchaseInfoCollection",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(PurchaseInfo)1825_storage)"
      },
      {
        "astId": 1860,
        "contract": "contracts/otcSale.sol:OtcSale",
        "label": "periodicalPurchaseLimit",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1862,
        "contract": "contracts/otcSale.sol:OtcSale",
        "label": "blocksPerPeriod",
        "offset": 0,
        "slot": "10",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDCIP)1247": {
        "encoding": "inplace",
        "label": "contract IDCIP",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(PurchaseInfo)1825_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PurchaseInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PurchaseInfo)1825_storage"
      },
      "t_struct(BlockNumber)1708_storage": {
        "encoding": "inplace",
        "label": "struct Timers.BlockNumber",
        "members": [
          {
            "astId": 1707,
            "contract": "contracts/otcSale.sol:OtcSale",
            "label": "_deadline",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PurchaseInfo)1825_storage": {
        "encoding": "inplace",
        "label": "struct PurchaseInfo",
        "members": [
          {
            "astId": 1820,
            "contract": "contracts/otcSale.sol:OtcSale",
            "label": "cooldownEnd",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(BlockNumber)1708_storage"
          },
          {
            "astId": 1822,
            "contract": "contracts/otcSale.sol:OtcSale",
            "label": "totalBoughtInBNB",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1824,
            "contract": "contracts/otcSale.sol:OtcSale",
            "label": "isInitialized",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}