{
  "language": "Solidity",
  "sources": {
    "contracts/otcSale.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), 'Ownable: caller is not the owner');\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n/// @title PrivateSaleDCIP Contract\n\ninterface IDCIP {\n    function transfer(address to, uint256 amount) external;\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function decimals() external pure returns (uint8);\n}\n\ncontract OtcSale is Ownable {\n    IDCIP public token;\n    uint256 public totalBNBEarned;\n    uint256 public minimumDepositBNBAmount = 1 wei;\n    uint256 public maximumDepositBNBAmount = 100000000 ether;\n    uint256 public tokenRate;\n    address private updater;\n\n    constructor(IDCIP _tokenAddress, address _updater) {\n        token = _tokenAddress;\n        tokenRate = 999999999999999;\n        updater = _updater;\n    }\n\n    function buy() external payable returns (bool) {\n        require(tokenRate > 1, 'Invalid tokenPrice');\n        require(\n            msg.value >= minimumDepositBNBAmount && msg.value <= maximumDepositBNBAmount,\n            'Purchase is too small or big'\n        );\n        // _rate.mul(10**uint256(token.decimals())).div(10**18);\n        uint256 tokenAmount = ((msg.value * tokenRate) / ((10**18))) * (10**9);\n\n        require(tokenAmount > 0, 'You need to buy at least 1 DCIP');\n        require(token.balanceOf(address(this)) >= tokenAmount, 'Not enough DCIP available for sale'); // Enough DCIP balance for sale\n\n        totalBNBEarned = totalBNBEarned + msg.value;\n        token.transfer(msg.sender, tokenAmount);\n        emit Bought(msg.sender, tokenAmount);\n        return true;\n    }\n\n    function getTokenRate() public view returns (uint256) {\n        return tokenRate;\n    }\n\n    function setUpdateAccount(address _updater) public onlyOwner returns (bool) {\n        updater = _updater;\n        return true;\n    }\n\n    function setTokenPrice(uint256 _rate) public returns (uint256) {\n        require(msg.sender == updater, 'Address is unauthorized');\n        require(_rate > 0, 'Rate must be higher than 0');\n        tokenRate = _rate;\n        return tokenRate;\n    }\n\n    function withdrawDCIP() external onlyOwner {\n        uint256 balance = token.balanceOf(address(this));\n        token.transfer(msg.sender, balance);\n    }\n\n    function withdrawBNB() external onlyOwner {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    function getBNBEarnedAmount() external view returns (uint256) {\n        return totalBNBEarned;\n    }\n\n    event Bought(address indexed user, uint256 amount);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}